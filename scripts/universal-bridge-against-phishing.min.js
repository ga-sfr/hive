!function(e,t,r){const n=(...e)=>console.log("%c[no-phish]","color:green",...e),i=(...e)=>console.error("%c[no-phish]","color:orange",...e),o=(...e)=>console.error("%c[no-phish]","color:blue",...e),a="knownPhishingDomains",s="blacklistLastFetch",c=3e5,l=9e5,h=1e3,f=15e3;n("Fetching spaminator's blacklist");let u=JSON.parse(localStorage.getItem(a)||"[]");const p=localStorage.getItem(s),g=()=>{fetch("https://cors-anywhere.herokuapp.com/https://spaminator.me/api/p/domains.json",{headers:{Accept:"application/json","x-requested-with":"https://spaminator.me"}}).then(e=>e.json()).then(e=>{e&&e.result&&Array.isArray(e.result)?(u=[...e.result,"justnetwork.scam"],localStorage.setItem(a,JSON.stringify(u)),localStorage.setItem(s,Date.now())):i("Unable to retrieve phishing url list. Data:",e)}).catch(e=>i("Unable to fetch spaminator's list of known phishing domains",e))};(()=>!p||Date.now()-+p>c)()&&g();let d=Date.now();const k=()=>{n("Checking whether it's time to fetch again the blacklist"),Date.now()-d>c&&(d=Date.now(),n("Fetching again spaminator's blacklist"),g())};setInterval(k,l);const m=()=>"hive.blog"!==e.location.hostname;if(m()){const t=history.pushState;history.pushState=((...e)=>(n("History change (ps), checking age of blacklist"),k(),t(...e)));const r=e.replaceState;e.replaceState=((...e)=>(n("History change (rs), checking age of blacklist"),k(),r(...e)))}else{let t=e.location.href;setInterval(()=>{e.location.href!==t&&(n("History change (poll), checking age of blacklist"),t=e.location.href,k())},f)}e.addEventListener("popstate",()=>{n("History change (ops), checking age of blacklist")});const S=(e="",t,r)=>{if(!e)return{isSafe:!0};n(`Checking for phishing, url "${e}". Type: ${t}.`),r&&(r.kd={preSanitized:!0}),"string"!=typeof e&&(e=`${e}`);const a=((e="")=>{if(!e)return"#";const t=e.split("//")[1];return t&&"/"===t.slice(-1)?t.slice(0,-1):t})(e);if(((e,t)=>t&&u.includes(t)||u.find(r=>r.includes(t)||e.includes(r)))(e,a)){switch(o("Found phishing domain",a),t.toLowerCase()){case"tag_iframe":alert(`Iframe "${a}" blocked, it is marked as PHISHING ❗ ☠️`),r&&(r.src="",r.style.border="2px solid red !important");break;case"tag_script":alert(`script "${a}" blocked, its src is marked as PHISHING ❗ ☠️`),r&&(r.src="");break;case"tag_img":r&&(r.src="",r.alt="PHISHING IMAGE blocked ❗ ☠️");break;case"tag_a":r&&(r.href="",r.style.color="red !important",r.style["text-decoration"]="line-through !important",r.onclick=(e=>{alert(`The link you are trying to open is marked as PHISHING!\n\n${a} -> Do NOT open ❗ ☠️`),e.preventDefault()}));break;case"xhr":o("xhr request blocked, its target is marked as PHISHING ❗ ☠️");break;case"fetch":o("fetch request blocked, its target is marked as PHISHING ❗ ☠️");break;case"open":alert(`The link you are trying to open is marked as PHISHING!\n\n${a} -> Do NOT open ❗ ☠️`);break;default:i(`Unexpected type "${t}" for ulrChecker`)}return{isSafe:!1}}return{isSafe:!0}},b={withSrc:["iframe","script","img"],withHref:["a"]},y=t.createElement;if(t.createElement=((e="",r)=>{const i=y.call(t,e,r),o=((e="")=>b.withSrc.includes(e)?"src":b.withHref.includes(e)?"href":null)(e.toLowerCase());if(!o)return i;const a=i.setAttribute.bind(i),s=i.getAttribute.bind(i);return m()&&Object.defineProperties(i,{[o]:{get:()=>{n(`Getting value of attribute ${o} for element ${e}`);const t=i.getAttribute(o),{isSafe:r}=S(t,`tag_${e}`);return r?t:null},set:t=>{n(`Setting value of attribute ${o} for element ${e} with ${o} "${t}"`);const{isSafe:r}=S(t,`tag_${e}`,i);return r&&a(o,t),!!r}}}),i.setAttribute=((...t)=>{const[r,o,...s]=t;if("src"===r||"href"===r){n(`Setting value of attribute ${r} for element ${e}`);const{isSafe:t}=S(o,`tag_${e}`,i);t&&a(r,o,...s)}else a(...t)}),i.getAttribute=((...t)=>{const[r]=t;if("src"===r||"href"===r){n(`Getting value of attribute ${r} for element ${e}`);const o=s(...t),{isSafe:a}=S(o,`tag_${e}`,i);return a?o:null}return s(...t)}),i}),r){const e=r.prototype.open;r.prototype.open=function(t,r,n,i,o){const{isSafe:a}=S(r,"xhr");if(a)return void 0===n?e.call(this,t,r,!0):e.call(this,t,r,n,i,o)}}if(e.fetch){const t=e.fetch;e.fetch=((e,r)=>{if("string"==typeof e){const{isSafe:n}=S(e,"fetch");return n?t(e,r):Promise.reject("unsafe url")}if(e.url&&"string"==typeof e.url){const{isSafe:n}=S(e.url,"fetch");return n?t(e,r):Promise.reject("unsafe url")}})}const w=e.open;e.open=((...e)=>{const[t]=e;n(`Checking url "${t}" of the link before opening it`);const{isSafe:r}=S(t,"open");r&&w(...e)});const $=e=>new Promise(t=>setTimeout(t,e)),H=e=>{const r=t.querySelectorAll(e);for(let t=0;t<r.length;t++){const n=r[t];if(n.kd&&(n.kd.preSanitized||n.kd.postSanitized))continue;n.kd={postSanitized:!0};const i=n.href||n.src;i&&S(i,`tag_${e}`,n)}};e.addEventListener("load",async()=>{await $(h),n("Page load complete. Checking all risky elements not already sanitized.."),b.withSrc.forEach(H),b.withHref.forEach(H),await $(3*h),n("Checking one last time all risky elements not already sanitized.."),b.withSrc.forEach(H),b.withHref.forEach(H)})}(window,document,XMLHttpRequest);
